# shap_models.py

import os
import pandas as pd
import shap
import matplotlib.pyplot as plt
from sklearn.model_selection import train_test_split
from catboost import CatBoostRegressor
from xgboost import XGBRegressor
from lightgbm import LGBMRegressor

# -----------------------
# 1. Load data
# -----------------------
# Please place your dataset in the same folder as this script and name it "data.csv"
df = pd.read_csv("data.csv")
years = df["Year"].unique()
target_col = "A"  # target variable

# -----------------------
# 2. Set output directory
# -----------------------
output_dir = "shap_results"
os.makedirs(output_dir, exist_ok=True)

# -----------------------
# 3. Model configuration
# -----------------------
models = {
    "CatBoost": CatBoostRegressor(verbose=0),
    "XGBoost": XGBRegressor(verbosity=0),
    "LightGBM": LGBMRegressor(verbose=-1)
}

# -----------------------
# 4. Train models and compute SHAP values
# -----------------------
for model_name, model in models.items():
    model_dir = os.path.join(output_dir, model_name)
    os.makedirs(model_dir, exist_ok=True)
    shap_values_list = []

    for year in years:
        # select data for the current year
        data_year = df[df["Year"] == year].drop(columns=["Year"])
        X = data_year.drop(columns=[target_col])
        y = data_year[target_col]

        # split train and test sets
        X_train, X_test, y_train, y_test = train_test_split(
            X, y, test_size=0.2, random_state=42
        )

        # train the model
        model.fit(X_train, y_train)

        # compute SHAP values
        explainer = shap.Explainer(model, X_train)
        shap_values = explainer(X_test)

        # save SHAP summary plot
        plt.figure()
        shap.summary_plot(shap_values, X_test, show=False)
        plt.title(f"{model_name} - {year}")
        plt.tight_layout()
        plt.savefig(os.path.join(model_dir, f"SHAP_{year}.png"))
        plt.close()

        # save mean SHAP values to a dataframe
        shap_df = pd.DataFrame(shap_values.values, columns=X_test.columns)
        shap_df["Year"] = year
        shap_values_list.append(shap_df.mean().to_frame(name=str(year)).T)

    # combine all years' mean SHAP values and export to Excel
    shap_summary = pd.concat(shap_values_list)
    shap_summary.to_excel(os.path.join(model_dir, f"{model_name}_SHAP_mean.xlsx"), index=False)

print("All SHAP plots and mean values have been saved under '{}'".format(output_dir))
